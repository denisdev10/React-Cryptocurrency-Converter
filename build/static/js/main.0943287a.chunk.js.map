{"version":3,"sources":["App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","spacing","paper","textAlign","color","palette","text","secondary","cryptoInputBox","marginBottom","marginTop","currencyInput","minWidth","marginRight","currencyType","table","currencyIcon","width","height","borderRadius","App","classes","React","useState","allCoins","setAllCoins","useEffect","axios","get","then","coins","data","Data","map","coin","name","CoinInfo","Name","fullName","FullName","imageUrl","ImageUrl","price","RAW","USD","PRICE","toFixed","volume24Hour","parseInt","VOLUMEDAY","console","log","Container","maxWidth","className","Grid","container","item","xs","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","src","alt","FormControl","TextField","fullWidth","label","InputLabel","id","Select","value","MenuItem","Typography","variant","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0943287a.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            padding: theme.spacing(10),\n        },\n        paper: {\n            padding: theme.spacing(2),\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n        cryptoInputBox: {\n            marginBottom: 20,\n            marginTop: 20,\n        },\n\n        currencyInput: {\n\n            minWidth: 'calc(70%-10px)',\n            marginRight: 10,\n        },\n        currencyType: {\n            minWidth: '30%',\n        },\n        table: {\n            minWidth: 650,\n        },\n        currencyIcon:{\n            width:18,\n            height:18,\n            borderRadius:30,\n        }\n    }),\n);\n\n\n// сначало\ntype TCoin = {\n    name: string;\n    fullName: string;\n    imageUrl: string;\n    price: number;\n    volume24Hour: number;\n\n\n}\n// Tcoin - типы свойст\n//чтобы показывало ошибки, в массиве не может быть другого объекта кроме этого\n\n\nfunction App() {\n\n    const classes = useStyles(); //<> - какого типа будут ответы typescript\n    const [allCoins, setAllCoins] = React.useState<TCoin[]>([]); //allcoins должен быть только массивом  tcoin или null\n    //как только компонент отрендерется 1 раз будет выполнятся функция. Если ни 1 переменная не обновится то не будет выполнения функции\n    React.useEffect(() => {\n\n        axios.get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\n            .then(({data}) => {\n                const coins: TCoin[] = data.Data.map((coin: any) => {\n\n                    const obj: TCoin = {\n                        name: coin.CoinInfo.Name,\n                        fullName: coin.CoinInfo.FullName,\n                        imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\n                        price: coin.RAW.USD.PRICE.toFixed(3),\n                        volume24Hour: parseInt(coin.RAW.USD.VOLUMEDAY),\n\n                    }; //преобразовываем все объекты\n                    return obj;\n\n\n                });\n                setAllCoins(coins); //как только компанент отрендерется ты должен отправить гет запрос и вытащить инфу из ответа, из всего ответа вытащить DAta и передаем в coins, далее сохраняем коинс в переменной allcoins что все приложение знало какие данные мы получили потом производим ререндер\n                console.log(coins);\n\n            })\n    }, [classes]);\n\n\n    return (\n        <Container maxWidth=\"lg\" className={classes.root}>\n\n\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n\n                    <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell></TableCell>\n                                    <TableCell align=\"left\">Name</TableCell>\n                                    <TableCell align=\"left\">Fullname</TableCell>\n                                    <TableCell align=\"left\">Price</TableCell>\n                                    <TableCell align=\"left\">Volume day</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {allCoins.map((coin) => (\n                                    <TableRow key={coin.name}>\n                                        <TableCell><img className={classes.currencyIcon} src={coin.imageUrl} alt=\"Coin icon\"/></TableCell>\n                                        <TableCell align=\"left\">{coin.name}</TableCell>\n                                        <TableCell align=\"left\">{coin.fullName}</TableCell>\n                                        <TableCell align=\"left\">$ {coin.price}</TableCell>\n                                        <TableCell align=\"left\">${coin.volume24Hour}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper className={classes.paper}>\n                        <div className={classes.cryptoInputBox}>\n                            <FormControl className={classes.currencyInput}>\n                                <TextField fullWidth label=\"Сумма\"/>\n                            </FormControl>\n\n                            <FormControl className={classes.currencyType}>\n\n                                <InputLabel id=\"demo-simple-select-helper-label\">Валюта</InputLabel>\n                                <Select id=\"demo-simple-select\" value={10}>\n                                    <MenuItem value={10}>Ten</MenuItem>\n                                    <MenuItem value={20}>Twenty</MenuItem>\n                                    <MenuItem value={30}>Thirty</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </div>\n\n                        <div className={classes.cryptoInputBox}>\n                            <FormControl className={classes.currencyInput}>\n                                <TextField fullWidth label=\"Сумма\"/>\n                            </FormControl>\n\n                            <FormControl className={classes.currencyType}>\n\n                                <InputLabel id=\"demo-simple-select-helper-label\">Валюта</InputLabel>\n                                <Select id=\"demo-simple-select\" value={10}>\n                                    <MenuItem value={10}>Ten</MenuItem>\n                                    <MenuItem value={20}>Twenty</MenuItem>\n                                    <MenuItem value={30}>Thirty</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </div>\n\n                        <Typography variant=\"h5\" component=\"h5\">\n                            73,79 Российский рубль\n                        </Typography>\n\n                    </Paper>\n                </Grid>\n\n            </Grid>\n\n        </Container>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}